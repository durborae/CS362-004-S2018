Success: 0, Failed: 249745
File 'randomtestcard2.c'
Lines executed:97.37% of 38
Branches executed:100.00% of 24
Taken at least once:79.17% of 24
Calls executed:100.00% of 11
Creating 'randomtestcard2.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:#define NUMTESTS 100000
        -:   10:
function main called 4 returned 100% blocks executed 97%
        4:   11:int main() {
        4:   12:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   13:	struct gameState game_test;
        4:   14:	int retval = 0;
        4:   15:	int actioncount = 0, i = 0, success = 0, fail = 0, x = 0;
        4:   16:	int cardcount = 0;
        4:   17:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        4:   18:	int seed = time(NULL);
call    0 returned 100%
        4:   19:	int token = 0;
        -:   20:
   400004:   21:	for (x = 0; x < NUMTESTS; x++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   400000:   22:		int numplayers = rand() % MAX_PLAYERS + 1;
call    0 returned 100%
  1398345:   23:		for (i = 0; i < numplayers; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   998345:   24:			initializeGame(numplayers, k, seed, &game_test);
call    0 returned 100%
   998345:   25:			int currplayer = whoseTurn(&game_test);
call    0 returned 100%
   998345:   26:			actioncount = game_test.numActions;
   998345:   27:			cardcount = numHandCards(&game_test);
call    0 returned 100%
        -:   28:
        -:   29:			//put great hall into hand and play
   998345:   30:			game_test.hand[currplayer][0] = great_hall;
        -:   31:
   998345:   32:			int randomnum = rand() % 100;
call    0 returned 100%
   998345:   33:			if (randomnum >= 0 && randomnum < 5) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
    49806:   34:				game_test.deckCount[i] = 0;
        -:   35:			}
   948539:   36:			else if (randomnum >= 5 && randomnum < 10) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
    49714:   37:				game_test.handCount[i] = 0;
        -:   38:			}
   898825:   39:			else if (randomnum >= 10 && randomnum < 15) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
    49644:   40:				game_test.numActions = 0;
        -:   41:			}
        -:   42:
   998345:   43:			retval = playCard(0, 0, 0, 0, &game_test);
call    0 returned 100%
        -:   44:
   998345:   45:			if (retval != 0) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   46://				printf("failed cond 1\n");
        -:   47:				//printf("%d\n", retval);
    55852:   48:				token = 1;
        -:   49:			}
        -:   50:
   998345:   51:			int newactioncount = game_test.numActions;
   998345:   52:			int newcardcount = numHandCards(&game_test);
call    0 returned 100%
        -:   53:
   998345:   54:			if (newactioncount != (actioncount + 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   998345:   55:				token = 1;
        -:   56://				printf("Failed Cond 2\n");
        -:   57://				printf("New Actions: %d, Original Actions: %d\n", newactioncount, actioncount);
        -:   58:			}
        -:   59:
   998345:   60:			if (newcardcount != (cardcount-1)) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:   61://				printf("failed cond 3\n");
        -:   62://				printf("New card count: %d, Original Card Count: %d\n", newcardcount, cardcount);
   977199:   63:				token = 1;
        -:   64:			}
        -:   65:
   998345:   66:			if (token == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   67:				success++;
        -:   68:			}
        -:   69:			else {
   998345:   70:				fail++;
        -:   71:			}
   998345:   72:			token = 0;//reset token
        -:   73:		}
        -:   74:
        -:   75:	}
        4:   76:	printf("Success: %d, Failed: %d\n", success, fail);
call    0 returned 100%
        -:   77:
        4:   78:	return 0;
        -:   79:}
