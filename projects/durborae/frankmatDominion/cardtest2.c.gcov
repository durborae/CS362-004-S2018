        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include "assert.h"
        -:   10:
function main called 7 returned 100% blocks executed 80%
        7:   11:int main() {
        -:   12:	//initialize the pretest stuff
        -:   13:	struct gameState game_test;
        7:   14:	int retval = 0;
        7:   15:	int actioncount = 0;
        7:   16:	int cardcount = 0;
        7:   17:	int currentdeck = 0;
        7:   18:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   19:		sea_hag, tribute, smithy };
        7:   20:	int seed = time(NULL);
call    0 returned 100%
        7:   21:	int token = 0;
        -:   22:
        7:   23:	printf("Initializing game...\n");
call    0 returned 100%
        -:   24:	//initialize game
        7:   25:	retval = initializeGame(2, k, seed, &game_test);
call    0 returned 100%
        7:   26:	assert(retval == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        7:   27:	printf("Initialization Complete...\n");
call    0 returned 100%
        7:   28:	printf("#################################################\n\n");
call    0 returned 100%
        7:   29:	printf("Testing Card: Adventurer...\n");
call    0 returned 100%
        -:   30:
        -:   31:	//preserve game state
        7:   32:	actioncount = game_test.numActions;
        7:   33:	cardcount = numHandCards(&game_test);
call    0 returned 100%
        7:   34:	currentdeck = fullDeckCount(game_test.whoseTurn, 0, &game_test);
call    0 returned 100%
        -:   35:
        -:   36:	//put Adventurer into hand and play
        7:   37:	game_test.hand[0][0] = adventurer;
        7:   38:	retval = playCard(0, 0, 0, 0, &game_test);
call    0 returned 100%
        7:   39:	assert(retval != -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   40:
        -:   41:	//check new status
        7:   42:	int newcards = numHandCards(&game_test);
call    0 returned 100%
        -:   43:	//assert(newcards == (cardcount + 1)); //add one after playing one for net one
        7:   44:	if (newcards != (cardcount + 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:   45:		printf("Test Adventurer Failed! No net gain in cards in hand\n");
call    0 returned 100%
        7:   46:		token = 1;
        -:   47:	}
        -:   48:
        -:   49:	//Check action count
        7:   50:	int newaction = game_test.numActions;
        -:   51:	//assert(newaction == (actioncount - 1));
        7:   52:	if (newaction != (actioncount - 1) && token != 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   53:		printf("Test Adventurer Failed! No loss in Action\n");
call    0 never executed
    #####:   54:		token = 1;
        -:   55:	}
        -:   56:
        7:   57:	int newdecksize = fullDeckCount(game_test.whoseTurn, 0, &game_test);
call    0 returned 100%
        -:   58:	//assert(currentdeck > newdecksize);
        7:   59:	if (currentdeck <= newdecksize) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:   60:		printf("Test Adventurer Failed! No Net Loss in Deck Size\n");
call    0 returned 100%
        7:   61:		token = 1;
        -:   62:	}
        -:   63:
        7:   64:	if (token == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:		printf("Test Adventurer Passed!\n");
call    0 never executed
        -:   66:	}
        7:   67:	printf("#################################################\n\n");
call    0 returned 100%
        -:   68:
        7:   69:	return 0;
        -:   70:}
