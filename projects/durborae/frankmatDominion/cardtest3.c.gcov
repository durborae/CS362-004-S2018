        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1://This Program will implement a test of the garden card
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include "assert.h"
        -:   10:
function main called 7 returned 100% blocks executed 92%
        7:   11:int main() {
        -:   12:	//initialize the pretest stuff
        -:   13:	struct gameState game_test;
        7:   14:	int retval = 0;
        7:   15:	int actioncount = 0;
        7:   16:	int cardcount = 0;
        7:   17:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   18:		sea_hag, tribute, smithy };
        7:   19:	int seed = time(NULL);
call    0 returned 100%
        7:   20:	int token = 0;
        -:   21:
        7:   22:	printf("Initializing game...\n");
call    0 returned 100%
        -:   23:	//initialize game
        7:   24:	retval = initializeGame(2, k, seed, &game_test);
call    0 returned 100%
        7:   25:	assert(retval == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        7:   26:	printf("Initialization Complete...\n");
call    0 returned 100%
        7:   27:	printf("#################################################\n\n");
call    0 returned 100%
        7:   28:	printf("Testing Card: Gardens...\n");
call    0 returned 100%
        -:   29:
        -:   30:	//preserve game state
        7:   31:	actioncount = game_test.numActions;
        7:   32:	cardcount = numHandCards(&game_test);
call    0 returned 100%
        -:   33:
        -:   34:	//put gardens into hand and play
        7:   35:	game_test.hand[0][0] = gardens;
        7:   36:	retval = playCard(0, 0, 0, 0, &game_test);
call    0 returned 100%
        7:   37:	if(retval == -1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:   38:		printf("Test Garden Failed! Playcard Failed!\n");
call    0 returned 100%
        7:   39:		token = 1;
        -:   40:	}
        -:   41:
        -:   42:	//check new status
        7:   43:	int newcards = numHandCards(&game_test);
call    0 returned 100%
        -:   44:	//assert(newcards == (cardcount - 1)); //lose 1 after playing 1 for net -1
        7:   45:	if (newcards != (cardcount - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:   46:		printf("Test Gardens Failed! Card-in-hand count not as expected\n");
call    0 returned 100%
        7:   47:		token = 1;
        -:   48:	}
        -:   49:
        -:   50:	//Check action count
        7:   51:	int newaction = game_test.numActions;
        -:   52:	//assert(newaction == (actioncount - 1));
        7:   53:	if (newaction != (actioncount - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:   54:		printf("Test Gardens Failed! Action count not as expected\n");
call    0 returned 100%
        7:   55:		token = 1;
        -:   56:	}
        -:   57:
        7:   58:	if (token == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   59:		printf("Test Gardens Passed!\n");
call    0 never executed
        -:   60:	}
        -:   61:
        7:   62:	printf("#################################################\n\n");
call    0 returned 100%
        -:   63:
        7:   64:	return 0;
        -:   65:}
