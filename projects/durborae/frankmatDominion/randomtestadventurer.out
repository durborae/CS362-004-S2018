Begin Adventurer Test
Success: 13998, Failed: 11138
File 'randomtestadventurer.c'
Lines executed:97.50% of 40
Branches executed:100.00% of 26
Taken at least once:84.62% of 26
Calls executed:100.00% of 11
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:#define NUMTESTS 10000
        -:   10:
function main called 2 returned 100% blocks executed 97%
        2:   11:int main() {
        -:   12:	struct gameState G;
        -:   13:	int success, fail, x, i, token;
        2:   14:	success = fail = x = i = token = 0;
        -:   15:	//srand(time(NULL));
        2:   16:	int seed = time(NULL);
call    0 returned 100%
        2:   17:	int result = 0;
        2:   18:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        2:   19:	printf("Begin Adventurer Test\n");
call    0 returned 100%
        -:   20:
    20002:   21:	for (x = 0; x < NUMTESTS; x++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   22:		//printf("Turn: %d\n", x);
    20000:   23:		int numplayers = rand() % MAX_PLAYERS + 1;
call    0 returned 100%
    70272:   24:		for (i = 0; i < numplayers; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
    50272:   25:			int currplayer = whoseTurn(&G);
call    0 returned 100%
    50272:   26:			initializeGame(numplayers, k, seed, &G);
call    0 returned 100%
    50272:   27:			G.deckCount[i] = rand() % MAX_DECK;
call    0 returned 100%
    50272:   28:			int startdcount = G.deckCount[i];
    50272:   29:			G.discardCount[i] = rand() % MAX_DECK;
call    0 returned 100%
    50272:   30:			int startdccount = G.discardCount[i];
    50272:   31:			G.handCount[i] = rand() % MAX_HAND;
call    0 returned 100%
    50272:   32:			int starthcount = G.handCount[i];
        -:   33:			//printf("before\n");
    50272:   34:			G.hand[currplayer][0] = adventurer;//put adventurer in hand
        -:   35:			
    50272:   36:			int randomnum = rand() % 100;
call    0 returned 100%
    50272:   37:			if (randomnum >= 0 && randomnum < 5) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
     2538:   38:				G.deckCount[i] = 0;
        -:   39:			}
    47734:   40:			else if (randomnum >= 5 && randomnum < 10) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
     2624:   41:				G.handCount[i] = 0;
        -:   42:			}
    45110:   43:			else if (randomnum >= 10 && randomnum < 15) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
     2466:   44:				G.numActions = 0;
        -:   45:			}
        -:   46:
    50272:   47:			result = playCard(0, 0, 0, 0, &G);
call    0 returned 100%
        -:   48:			//printf("after\n");
        -:   49:			
    50272:   50:			if (result != 0) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
     7118:   51:				token = 1;
        -:   52:				//printf("cond1\n");
        -:   53:				//printf("%d\n", result);
        -:   54:			}
    50272:   55:			if (G.deckCount[i] > startdcount) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   56:				token = 1;
        -:   57:				//printf("cond2\n");
        -:   58:			}
    50272:   59:			if (startdccount < G.discardCount[i]) {
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    13578:   60:				token = 1;
        -:   61:				//printf("cond3\n");
        -:   62:			}
    50272:   63:			if(starthcount > G.handCount[i]){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     2655:   64:				token = 1;
        -:   65:				//printf("cond4\n");
        -:   66:			}
        -:   67:			//printf("Token: %d\n", token);
    50272:   68:			if (token == 0) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:   69:				//printf("A\n");
    28035:   70:				success++;
        -:   71:			}
        -:   72:			else {
        -:   73:				//printf("B\n");
    22237:   74:				fail++;
        -:   75:			}
    50272:   76:			token = 0;//reset token
        -:   77:		}
        -:   78:		
        -:   79:	}
        2:   80:	printf("Success: %d, Failed: %d\n", success, fail);
call    0 returned 100%
        -:   81:
        2:   82:	return 0;
        -:   83:}
